name: Continuous Integration
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-20.04

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: banking_app
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      DB_DATABASE: banking_app
      DB_USER: root
      DB_PASSWORD: root
      DB_HOST: 127.0.0.1
      DB_PORT: 3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Wait for MySQL to be ready
      run: |
        until mysqladmin ping -h "$DB_HOST" --silent; do
          echo 'waiting for mysql to be connectable...'
          sleep 5
        done

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        pip install pytest
        python -m pytest

    - name: Run linting
      run: |
        npm install jslint
        npx jslint **/*.js

    - name: Run black for Python linting
      run: |
        pip install black
        black .

    - name: Collect errors
      if: failure()
      run: |
        echo "Collecting errors..."
        mkdir -p error_logs
        echo "Error in job: ${{ github.job }}" >> error_logs/errors.log
        echo "Error message: ${{ failure() }}" >> error_logs/errors.log

    - name: Build Docker image
      run: |
        docker build -t koke1997/banking-app:latest .

    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker image
      run: |
        docker push koke1997/banking-app:latest

    - name: Set up kubectl
      run: |
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml

  code_quality:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run code quality checks
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pylint **/*.py
          npm install jslint
          npx jslint **/*.js
          npm install stylelint stylelint-scss
          npx stylelint **/*.{css,scss}

  security:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run security checks
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          bandit -r .

  dependency:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run dependency checks
        run: |
          python -m pip install --upgrade pip
          pip install safety
          safety check
